openapi: 3.0.3
info:
  title: Flat Expense Management API
  description: Backend API for managing flat expenses, complaints, and notifications
  version: 1.0.0
  contact:
    name: API Support
servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://api.flatexpense.com/api
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [super-admin, admin, resident]
        phone:
          type: string
          nullable: true
        buildingId:
          type: integer
          nullable: true
        flatNumber:
          type: string
          nullable: true
        status:
          type: string
          enum: [pending, approved, rejected]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Building:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        admin_id:
          type: integer
          nullable: true
        total_units:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Complaint:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        building_id:
          type: integer
        category:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [low, medium, high, emergency]
        status:
          type: string
          enum: [submitted, assigned, in-progress, resolved]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Bill:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        building_id:
          type: integer
        month:
          type: string
        year:
          type: integer
        rent_amount:
          type: number
        maintenance_amount:
          type: number
        total_amount:
          type: number
        due_date:
          type: string
          format: date
        status:
          type: string
          enum: [pending, paid, overdue]
        paid_at:
          type: string
          format: date-time
          nullable: true
        payment_method:
          type: string
          nullable: true
        transaction_id:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        building_id:
          type: integer
        type:
          type: string
          enum: [bill, complaint, announcement, system]
        title:
          type: string
        message:
          type: string
        read:
          type: boolean
        created_at:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        details:
          type: object
          nullable: true

    PaginatedResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            items:
              type: array
              items: {}
            pagination:
              type: object
              properties:
                page:
                  type: integer
                limit:
                  type: integer
                total:
                  type: integer
                totalPages:
                  type: integer
                hasNext:
                  type: boolean
                hasPrev:
                  type: boolean

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                  service:
                    type: string
                  version:
                    type: string

  /auth/register:
    post:
      summary: Register new user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
                phone:
                  type: string
                building_id:
                  type: integer
                flat_number:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                          user:
                            $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout user
      tags: [Authentication]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/me:
    get:
      summary: Get current user profile
      tags: [Authentication]
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: Get all users (paginated)
      tags: [Users]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
        - name: role
          in: query
          schema:
            type: string
            enum: [super-admin, admin, resident]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                flat_number:
                  type: string
                building_id:
                  type: integer
                role:
                  type: string
                  enum: [super-admin, admin, resident]
                status:
                  type: string
                  enum: [pending, approved, rejected]
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user (Super Admin only)
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /buildings:
    get:
      summary: Get all buildings
      tags: [Buildings]
      responses:
        '200':
          description: List of buildings
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          buildings:
                            type: array
                            items:
                              $ref: '#/components/schemas/Building'

    post:
      summary: Create building (Super Admin only)
      tags: [Buildings]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, address, total_units]
              properties:
                name:
                  type: string
                address:
                  type: string
                admin_id:
                  type: integer
                total_units:
                  type: integer
      responses:
        '201':
          description: Building created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          building:
                            $ref: '#/components/schemas/Building'

  /complaints:
    get:
      summary: Get complaints (filtered by role)
      tags: [Complaints]
      responses:
        '200':
          description: List of complaints
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          complaints:
                            type: array
                            items:
                              $ref: '#/components/schemas/Complaint'

    post:
      summary: Create new complaint
      tags: [Complaints]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description, type, priority]
              properties:
                title:
                  type: string
                description:
                  type: string
                type:
                  type: string
                priority:
                  type: string
                  enum: [low, medium, high, emergency]
                location:
                  type: string
      responses:
        '201':
          description: Complaint created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          complaint:
                            $ref: '#/components/schemas/Complaint'

  /bills:
    get:
      summary: Get bills for user
      tags: [Bills]
      responses:
        '200':
          description: List of bills
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          bills:
                            type: array
                            items:
                              $ref: '#/components/schemas/Bill'

    post:
      summary: Create new bill (admin/super-admin only)
      tags: [Bills]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, month, year, dueDate]
              properties:
                userId:
                  type: integer
                buildingId:
                  type: integer
                month:
                  type: string
                year:
                  type: integer
                rentAmount:
                  type: number
                  default: 0
                maintenanceAmount:
                  type: number
                  default: 0
                dueDate:
                  type: string
                  format: date
                paymentMethod:
                  type: string
                transactionId:
                  type: string
      responses:
        '201':
          description: Bill created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          bill:
                            $ref: '#/components/schemas/Bill'

  /notifications:
    get:
      summary: Get notifications for current user
      tags: [Notifications]
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notifications:
                            type: array
                            items:
                              $ref: '#/components/schemas/Notification'

    post:
      summary: Create notification (admin/super-admin only)
      tags: [Notifications]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, message]
              properties:
                userId:
                  type: integer
                title:
                  type: string
                message:
                  type: string
                type:
                  type: string
                  default: announcement
                buildingId:
                  type: integer
      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notification:
                            $ref: '#/components/schemas/Notification'

  /analytics:
    get:
      summary: Get analytics data
      tags: [Analytics]
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          revenue:
                            type: object
                          complaints:
                            type: object
                          occupancy:
                            type: object
                          users:
                            type: object

  /upload/image:
    post:
      summary: Upload single image
      tags: [Upload]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                          filename:
                            type: string
                          originalName:
                            type: string
                          size:
                            type: integer
                          mimetype:
                            type: string
