services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: flat-expense-db
    environment:
      POSTGRES_USER: flatexpense
      POSTGRES_PASSWORD: flatexpense123
      POSTGRES_DB: flat_expense_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/seed:/docker-entrypoint-initdb.d/seed
    networks:
      - flat-expense-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flatexpense -d flat_expense_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flat-expense-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://flatexpense:flatexpense123@database:5432/flat_expense_db?sslmode=disable
      JWT_SECRET: your_super_secret_jwt_key_here_change_in_production
      API_PORT: 3001
      CORS_ORIGIN: http://localhost:3000
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASS: ""
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - flat-expense-network
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    restart: unless-stopped

  # Frontend Next.js App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flat-expense-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - flat-expense-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flat-expense-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flat-expense-network
    command: redis-server --appendonly yes
    restart: unless-stopped

  # MinIO Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: flat-expense-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - flat-expense-network
    command: server /data --console-address ":9001"
    restart: unless-stopped

  # MailHog (SMTP Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: flat-expense-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - flat-expense-network
    restart: unless-stopped

networks:
  flat-expense-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
