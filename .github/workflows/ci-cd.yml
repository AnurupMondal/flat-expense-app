name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_USER: flatexpense
  POSTGRES_PASSWORD: flatexpense123
  POSTGRES_DB: flat_expense_db_test

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json

    - name: Install backend dependencies
      if: matrix.component == 'backend'
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      if: matrix.component == 'frontend'
      working-directory: ./frontend
      run: npm ci

    - name: Setup test database
      if: matrix.component == 'backend'
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        # Run database migrations/schema setup if available
        npm run build
        # Add database setup commands here if needed

    - name: Run backend tests
      if: matrix.component == 'backend'
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        JWT_SECRET: test_jwt_secret
        REDIS_URL: redis://localhost:6379
      run: npm test

    - name: Run frontend tests
      if: matrix.component == 'frontend'
      working-directory: ./frontend
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:3001/api
      run: npm run build && npm run lint

    - name: Run backend linting
      if: matrix.component == 'backend'
      working-directory: ./backend
      run: npm run lint

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        file: ./${{ matrix.component }}/Dockerfile
        push: false
        tags: flat-expense-${{ matrix.component }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Start services
      run: |
        docker-compose up -d database redis
        sleep 10
    
    - name: Build and start application
      run: |
        docker-compose up -d --build backend frontend
        sleep 30
    
    - name: Run integration tests
      run: |
        # Add integration tests here
        curl -f http://localhost:3001/api/health || exit 1
        curl -f http://localhost:3000 || exit 1
    
    - name: Cleanup
      run: docker-compose down -v
